name: number_trivia_project
description: A new Flutter project named Number Trivia using the implementation of Clean Architecture with BLoC Patterns.
# The following line prevents the package from being accidentally published to
# pub.dev using `flutter pub publish`. This is preferred for private packages.
publish_to: 'none' # Remove this line if you wish to publish to pub.dev

# The following defines the version and build number for your application.
# A version number is three numbers separated by dots, like 1.2.43
# followed by an optional build number separated by a +.
# Both the version and the builder number may be overridden in flutter
# build by specifying --build-name and --build-number, respectively.
# In Android, build-name is used as versionName while build-number used as versionCode.
# Read more about Android versioning at https://developer.android.com/studio/publish/versioning
# In iOS, build-name is used as CFBundleShortVersionString while build-number is used as CFBundleVersion.
# Read more about iOS versioning at
# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html
# In Windows, build-name is used as the major, minor, and patch parts
# of the product and file versions while build-number is used as the build suffix.
version: 1.0.0+1

environment:
  sdk: '>=2.19.0 <3.0.0'

# Dependencies specify other packages that your package needs in order to work.
# To automatically upgrade your package dependencies to the latest versions
# consider running `flutter pub upgrade --major-versions`. Alternatively,
# dependencies can be manually updated by changing the version numbers below to
# the latest version available on pub.dev. To see which dependencies have newer
# versions available, run `flutter pub outdated`.
dependencies:
  flutter:
    sdk: flutter

  # Flutter widget that automatically resizes text to fit perfectly within its bounds.
  auto_size_text: ^3.0.0

  # A testing library which makes it easy to test blocs. Built to be used with the bloc state management package.
  bloc_test: ^9.1.1

  # Coverage data manipulation and formatting.
  coverage: ^1.6.3

  # The following adds the Cupertino Icons font to your application.
  # Use with the CupertinoIcons class for iOS style icons.
  cupertino_icons: ^1.0.5

  # Functional Programming in Dart.
  # Purify your Dart code using efficient immutable data structures,
  # monads, lenses and other FP tools.
  dartz: ^0.10.1

  # Approximate how your Flutter app looks and performs on another device.
  device_preview: ^1.1.0

  # A Dart package that helps to implement value based equality
  # without needing to explicitly override == and hashCode.
  equatable: ^2.0.5

  # A Flutter package to use and make beautiful Material design based themes.
  flex_color_scheme: ^6.1.2

  # A collection of Flex widgets (Columns and Rows) with additional functionality.
  flextras: ^1.0.0

  # Fluent UI System Icons are a collection of familiar, friendly and modern icons from Microsoft.
  fluentui_system_icons: 1.1.190

  # A page slider with parallax design that allows (Text) widgets or body to slide at a different speed with background.
  flutter_onboarding_slider: ^1.0.8

  # Flutter Widgets that make it easy to implement the BLoC (Business Logic Component) design pattern.
  # Built to be used with the bloc state management package
  flutter_bloc: ^8.1.2

  # A package which simplifies the task of updating your Flutter app's launcher icon..
  flutter_launcher_icons: ^0.12.0

  # Customize Flutter's default white native splash screen with background color and splash image.
  # Supports dark mode, full screen, and more.
  flutter_native_splash: ^2.2.19

  # Code generation for immutable classes that has a simple syntax/API without compromising on the features.
  freezed: ^2.3.2

  # Flutter widgets for easily adding gaps inside Flex widgets such as Columns and Rows or scrolling views.
  gap: ^2.0.1

  # Simple direct Service Locator that allows to decouple the interface from a concrete implementation
  # and to access the concrete implementation from everywhere in your App.
  get_it: ^7.2.0

  # A Flutter package to use fonts from fonts.google.com.
  # Supports HTTP fetching, caching, and asset bundling.
  google_fonts: ^4.0.3

  # A declarative router for Flutter based on Navigation 2 supporting deep linking, data-driven routes and more.
  go_router: ^6.2.0

  # A flutter implementation of React hooks. It adds a new kind of widget with enhanced code reuse.
  flutter_hooks: ^0.18.6

  # A composable, multi-platform, Future-based API for HTTP requests.
  http: ^0.13.5

  # A pure Dart library that checks for internet
  # by opening a socket to a list of specified addresses,
  # each with individual port and timeout. Defaults are provided for convenience.
  internet_connection_checker: ^1.0.0+1

  # Small, easy to use and extensible logger which prints beautiful logs.
  logger: ^1.2.2

  # A mock framework inspired by Mockito with APIs for Fakes, Mocks, behavior verification, and stubbing.
  mockito: ^5.3.2

  # A Dart mock library which simplifies mocking with null safety support and no manual mocks or code generation.
  mocktail: ^0.3.0

  # A do all, highly customizable persistent/static bottom navigation bar for flutter. Includes up-to 20 styles.
  persistent_bottom_nav_bar: ^5.0.2

  # Flutter plugin for reading and writing simple key-value pairs.
  # Wraps NSUserDefaults on iOS and SharedPreferences on Android.
  shared_preferences: ^2.0.18

  # Access MediaQuery sizing info directly on the context, also adds some helper methods for sizing and layout.
  sized_context: ^1.0.0+1

  # A widget that detects the visibility of its child and notifies a callback.
  visibility_detector: ^0.4.0+2

dev_dependencies:
  build_runner:
  flutter_test:
    sdk: flutter

  # An opinionated, community-driven set of lint rules for Dart and Flutter projects.
  # Like pedantic but stricter.
  lint: ^2.0.1

# For information on the generic Dart part of this file, see the
# following page: https://dart.dev/tools/pub/pubspec

# The following section is specific to Flutter packages.
flutter:

  # The following line ensures that the Material Icons font is
  # included with your application, so that you can use the icons in
  # the material Icons class.
  uses-material-design: true

  # To add assets to your application, add an assets section, like this:
  assets:
    - assets/images/

  # An image asset can refer to one or more resolution-specific "variants", see
  # https://flutter.dev/assets-and-images/#resolution-aware

  # For details regarding adding assets from package dependencies, see
  # https://flutter.dev/assets-and-images/#from-packages

  # To add custom fonts to your application, add a fonts section here,
  # in this "flutter" section. Each entry in this list should have a
  # "family" key with the font family name, and a "fonts" key with a
  # list giving the asset and other descriptors for the font. For
  # example:
  # fonts:
  #   - family: Schyler
  #     fonts:
  #       - asset: fonts/Schyler-Regular.ttf
  #       - asset: fonts/Schyler-Italic.ttf
  #         style: italic
  #   - family: Trajan Pro
  #     fonts:
  #       - asset: fonts/TrajanPro.ttf
  #       - asset: fonts/TrajanPro_Bold.ttf
  #         weight: 700
  #
  # For details regarding fonts from package dependencies,
  # see https://flutter.dev/custom-fonts/#from-packages
