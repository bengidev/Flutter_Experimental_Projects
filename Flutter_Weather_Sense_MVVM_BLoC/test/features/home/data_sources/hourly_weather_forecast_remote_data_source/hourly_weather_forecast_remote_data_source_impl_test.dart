import 'package:flutter_test/flutter_test.dart';
import 'package:flutter_weather_sense_mvvm_bloc/core/core_barrel.dart';
import 'package:flutter_weather_sense_mvvm_bloc/features/home/data_sources/hourly_weather_forecast_remote_data_source_barrel.dart';
import 'package:flutter_weather_sense_mvvm_bloc/features/home/models/hourly_weather_forecast_model_barrel.dart';
import 'package:http/http.dart' as http;
import 'package:mocktail/mocktail.dart';

class MockHttpClient extends Mock implements http.Client {}

void main() async {
  late MockHttpClient httpClient;
  late HourlyWeatherForecastRemoteDataSourceImpl
      hourlyWeatherForecastRemoteDataSourceImpl;

  setUpAll(() {
    registerFallbackValue(Uri());
  });

  setUp(() {
    httpClient = MockHttpClient();
    hourlyWeatherForecastRemoteDataSourceImpl =
        HourlyWeatherForecastRemoteDataSourceImpl(httpClient: httpClient);
  });

  setUpAll(() {
    registerFallbackValue(
      HourlyWeatherForecastModel.defaultValue(),
    );
  });

  String buildJsonResults() {
    const rawJsonResults = '''
    {"latitude":52.52,"longitude":13.419998,"generationtime_ms":0.7330179214477539,"utc_offset_seconds":7200,"timezone":"Europe/Berlin","timezone_abbreviation":"CEST","elevation":38.0,"current_weather":{"temperature":14.1,"windspeed":12.9,"winddirection":283.0,"weathercode":2,"is_day":1,"time":"2023-06-01T10:00"},"hourly_units":{"time":"iso8601","temperature_2m":"°C","relativehumidity_2m":"%","dewpoint_2m":"°C","apparent_temperature":"°C","precipitation_probability":"%","weathercode":"wmo code","surface_pressure":"hPa","visibility":"m","windspeed_10m":"km/h"},"hourly":{"time":["2023-06-01T00:00","2023-06-01T01:00","2023-06-01T02:00","2023-06-01T03:00","2023-06-01T04:00","2023-06-01T05:00","2023-06-01T06:00","2023-06-01T07:00","2023-06-01T08:00","2023-06-01T09:00","2023-06-01T10:00","2023-06-01T11:00","2023-06-01T12:00","2023-06-01T13:00","2023-06-01T14:00","2023-06-01T15:00","2023-06-01T16:00","2023-06-01T17:00","2023-06-01T18:00","2023-06-01T19:00","2023-06-01T20:00","2023-06-01T21:00","2023-06-01T22:00","2023-06-01T23:00","2023-06-02T00:00","2023-06-02T01:00","2023-06-02T02:00","2023-06-02T03:00","2023-06-02T04:00","2023-06-02T05:00","2023-06-02T06:00","2023-06-02T07:00","2023-06-02T08:00","2023-06-02T09:00","2023-06-02T10:00","2023-06-02T11:00","2023-06-02T12:00","2023-06-02T13:00","2023-06-02T14:00","2023-06-02T15:00","2023-06-02T16:00","2023-06-02T17:00","2023-06-02T18:00","2023-06-02T19:00","2023-06-02T20:00","2023-06-02T21:00","2023-06-02T22:00","2023-06-02T23:00","2023-06-03T00:00","2023-06-03T01:00","2023-06-03T02:00","2023-06-03T03:00","2023-06-03T04:00","2023-06-03T05:00","2023-06-03T06:00","2023-06-03T07:00","2023-06-03T08:00","2023-06-03T09:00","2023-06-03T10:00","2023-06-03T11:00","2023-06-03T12:00","2023-06-03T13:00","2023-06-03T14:00","2023-06-03T15:00","2023-06-03T16:00","2023-06-03T17:00","2023-06-03T18:00","2023-06-03T19:00","2023-06-03T20:00","2023-06-03T21:00","2023-06-03T22:00","2023-06-03T23:00","2023-06-04T00:00","2023-06-04T01:00","2023-06-04T02:00","2023-06-04T03:00","2023-06-04T04:00","2023-06-04T05:00","2023-06-04T06:00","2023-06-04T07:00","2023-06-04T08:00","2023-06-04T09:00","2023-06-04T10:00","2023-06-04T11:00","2023-06-04T12:00","2023-06-04T13:00","2023-06-04T14:00","2023-06-04T15:00","2023-06-04T16:00","2023-06-04T17:00","2023-06-04T18:00","2023-06-04T19:00","2023-06-04T20:00","2023-06-04T21:00","2023-06-04T22:00","2023-06-04T23:00","2023-06-05T00:00","2023-06-05T01:00","2023-06-05T02:00","2023-06-05T03:00","2023-06-05T04:00","2023-06-05T05:00","2023-06-05T06:00","2023-06-05T07:00","2023-06-05T08:00","2023-06-05T09:00","2023-06-05T10:00","2023-06-05T11:00","2023-06-05T12:00","2023-06-05T13:00","2023-06-05T14:00","2023-06-05T15:00","2023-06-05T16:00","2023-06-05T17:00","2023-06-05T18:00","2023-06-05T19:00","2023-06-05T20:00","2023-06-05T21:00","2023-06-05T22:00","2023-06-05T23:00","2023-06-06T00:00","2023-06-06T01:00","2023-06-06T02:00","2023-06-06T03:00","2023-06-06T04:00","2023-06-06T05:00","2023-06-06T06:00","2023-06-06T07:00","2023-06-06T08:00","2023-06-06T09:00","2023-06-06T10:00","2023-06-06T11:00","2023-06-06T12:00","2023-06-06T13:00","2023-06-06T14:00","2023-06-06T15:00","2023-06-06T16:00","2023-06-06T17:00","2023-06-06T18:00","2023-06-06T19:00","2023-06-06T20:00","2023-06-06T21:00","2023-06-06T22:00","2023-06-06T23:00","2023-06-07T00:00","2023-06-07T01:00","2023-06-07T02:00","2023-06-07T03:00","2023-06-07T04:00","2023-06-07T05:00","2023-06-07T06:00","2023-06-07T07:00","2023-06-07T08:00","2023-06-07T09:00","2023-06-07T10:00","2023-06-07T11:00","2023-06-07T12:00","2023-06-07T13:00","2023-06-07T14:00","2023-06-07T15:00","2023-06-07T16:00","2023-06-07T17:00","2023-06-07T18:00","2023-06-07T19:00","2023-06-07T20:00","2023-06-07T21:00","2023-06-07T22:00","2023-06-07T23:00"],"temperature_2m":[16.8,15.7,14.6,13.9,12.8,12.2,11.4,11.2,11.8,12.5,14.1,16.0,17.9,19.5,20.7,21.7,22.3,22.4,21.8,21.0,19.9,18.5,16.9,15.4,14.1,13.1,12.1,11.2,10.8,10.4,10.5,11.4,12.7,13.8,14.5,14.7,15.3,17.0,18.9,19.4,19.7,19.9,19.3,18.2,16.6,14.7,13.0,11.7,10.8,9.9,9.0,8.2,7.5,6.9,6.9,8.2,10.1,12.3,14.2,16.1,17.7,18.9,19.8,20.4,20.7,20.8,20.6,20.1,19.5,18.4,17.0,15.7,14.1,13.0,12.4,11.7,10.9,10.4,10.5,11.8,13.9,15.9,18.1,20.0,21.3,22.1,22.8,23.3,23.5,23.6,23.5,23.1,22.4,21.0,19.1,17.5,16.3,15.3,14.5,13.5,12.7,12.5,13.0,14.0,15.4,17.5,19.9,21.9,23.0,23.8,24.2,24.5,24.5,24.4,24.1,23.7,22.9,21.3,19.4,17.8,16.7,15.8,15.3,14.4,13.7,13.4,13.8,14.7,16.1,18.2,20.7,22.8,24.0,24.8,25.4,25.8,25.9,25.8,25.4,24.8,24.0,22.7,21.1,19.7,18.6,17.6,16.7,15.8,14.9,14.7,15.2,16.4,17.9,19.9,22.3,24.3,25.4,26.1,26.6,27.0,27.2,27.1,26.9,26.5,25.7,24.2,22.3,20.6],"relativehumidity_2m":[53,59,67,73,77,79,87,89,85,76,66,58,50,48,46,41,38,38,41,44,46,54,59,64,69,73,79,83,83,84,84,79,77,75,73,70,65,52,33,31,28,28,27,31,31,33,43,49,53,58,63,68,73,76,75,69,61,54,47,42,38,33,30,29,29,29,29,29,32,37,44,48,53,54,56,60,62,64,64,59,50,44,37,32,29,28,27,27,27,27,27,28,30,35,41,46,49,50,51,53,54,54,52,50,46,41,36,32,29,27,26,26,27,28,27,27,28,34,42,49,54,58,60,63,65,64,60,55,49,44,38,34,31,28,26,25,25,26,27,28,31,36,41,46,49,52,54,56,59,59,57,53,48,41,34,28,26,27,27,27,26,26,26,26,28,33,40,46],"dewpoint_2m":[7.2,7.8,8.5,9.1,8.9,8.7,9.4,9.5,9.4,8.4,7.8,7.8,7.3,8.2,8.7,7.9,7.3,7.4,8.0,8.3,7.9,9.1,8.8,8.7,8.5,8.4,8.6,8.5,8.1,7.8,8.0,7.9,8.8,9.5,9.7,9.3,8.8,7.1,2.3,1.9,0.7,0.8,-0.2,0.8,-0.6,-1.4,0.7,1.4,1.6,2.0,2.3,2.6,3.0,3.0,2.8,2.8,2.9,3.2,3.1,3.2,3.2,2.3,1.7,1.8,2.1,2.1,1.9,1.5,2.4,3.5,4.6,4.8,4.6,3.9,3.9,4.2,3.9,3.9,4.0,4.0,3.7,3.6,3.2,2.8,2.5,2.8,2.8,3.2,3.5,3.5,3.4,3.6,4.0,4.9,5.6,5.8,5.6,5.0,4.5,4.1,3.7,3.4,3.4,3.7,3.9,4.1,4.4,4.4,4.0,3.7,3.5,3.7,4.3,4.7,4.0,3.6,3.4,4.8,6.2,6.9,7.3,7.6,7.6,7.5,7.2,6.7,6.2,5.8,5.4,5.7,5.8,6.1,5.8,5.1,4.5,4.3,4.3,4.8,5.1,5.1,5.8,6.8,7.4,7.7,7.6,7.6,7.4,7.0,7.0,6.7,6.8,6.8,6.7,6.3,5.7,4.6,4.5,5.6,6.0,6.4,6.0,6.0,5.8,5.4,5.8,6.9,8.1,8.6],"apparent_temperature":[15.4,14.3,13.3,12.5,11.2,10.5,9.8,9.2,9.7,10.2,11.6,14.2,16.5,18.5,19.9,20.4,20.6,19.9,19.3,18.6,17.6,16.9,15.4,14.0,12.9,11.9,10.9,9.9,9.4,9.0,9.3,10.0,11.6,12.4,12.6,12.9,13.3,14.3,15.4,16.8,16.6,16.2,14.6,13.8,12.0,10.2,9.2,8.3,7.6,6.9,6.2,5.4,4.8,4.3,4.3,5.3,7.1,9.7,12.0,14.6,16.8,18.3,19.3,19.6,19.3,18.5,17.9,17.3,16.8,16.1,14.8,13.8,11.7,10.7,10.3,9.8,8.9,8.5,8.7,10.0,12.1,14.2,16.6,19.4,21.0,22.0,22.7,22.9,22.5,21.7,21.1,20.7,20.0,18.8,17.1,15.6,14.3,13.1,12.2,11.1,10.3,10.0,10.5,11.6,13.0,15.0,17.3,20.0,21.6,22.5,22.8,22.5,22.0,21.5,21.2,20.8,20.0,18.9,17.3,15.8,14.8,14.1,13.6,12.8,12.2,11.9,12.1,12.9,14.1,16.3,18.8,21.8,23.5,24.1,24.4,24.5,24.3,23.6,23.0,22.4,21.8,20.8,19.6,18.3,17.3,16.3,15.4,14.4,13.6,13.4,14.0,15.2,16.7,18.6,20.9,23.5,25.1,26.1,26.5,26.6,26.2,25.4,25.1,24.5,23.8,22.6,20.9,19.3],"precipitation_probability":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,17,26,21,15,10,7,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,3,3,4,5,6,6,6,6,6,6,6,4,2,0,0,0,0,1,2,3,3,3,3,4,5,6,5,4,3,2,1,0],"weathercode":[3,3,3,3,3,2,2,3,3,2,2,1,1,1,1,0,0,0,1,1,1,2,1,1,1,0,1,2,2,2,3,3,3,3,3,3,3,3,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,2,2,2,2,2,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,2,2,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,2,2,2,2,2,2,2,2,2,1,1,1],"surface_pressure":[1014.9,1014.8,1014.7,1014.7,1014.6,1014.5,1014.6,1014.6,1014.2,1014.2,1013.8,1013.6,1013.2,1012.6,1011.9,1011.3,1011.0,1011.0,1010.7,1010.5,1010.6,1010.9,1011.1,1011.3,1011.6,1012.0,1012.3,1012.6,1012.6,1012.7,1012.9,1013.5,1013.8,1014.4,1014.9,1015.3,1015.5,1015.6,1015.6,1015.7,1015.6,1015.5,1015.7,1016.2,1016.6,1017.2,1017.7,1018.1,1018.3,1018.7,1018.8,1018.7,1018.6,1018.8,1019.1,1019.3,1019.4,1018.8,1018.7,1018.5,1018.1,1017.8,1017.4,1016.9,1016.2,1015.6,1015.2,1015.2,1015.2,1015.2,1015.4,1015.7,1016.2,1016.2,1015.9,1015.8,1015.6,1015.7,1015.7,1015.9,1016.2,1016.3,1016.4,1016.4,1016.3,1016.1,1015.8,1015.5,1015.2,1014.9,1014.8,1014.8,1015.0,1015.4,1016.0,1016.5,1016.8,1017.2,1017.5,1017.6,1017.6,1017.7,1018.1,1018.5,1018.9,1019.1,1019.2,1019.2,1019.0,1018.8,1018.5,1018.2,1017.8,1017.5,1017.3,1017.1,1017.2,1017.5,1017.9,1018.2,1018.4,1018.5,1018.5,1018.5,1018.5,1018.6,1018.8,1019.0,1019.1,1019.2,1019.0,1018.8,1018.4,1018.0,1017.5,1017.1,1016.6,1016.3,1016.1,1015.9,1015.9,1015.9,1016.1,1016.3,1016.4,1016.5,1016.4,1016.3,1016.0,1015.9,1016.0,1016.1,1016.3,1016.3,1016.3,1016.3,1015.9,1015.4,1014.9,1014.4,1014.0,1013.6,1013.3,1013.1,1013.1,1013.3,1013.6,1013.9],"visibility":[24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00],"windspeed_10m":[5.3,6.0,6.5,8.1,8.6,9.3,10.1,12.9,13.4,13.4,12.9,14.2,14.1,14.8,14.3,14.4,13.8,14.4,14.1,13.5,12.0,9.7,8.0,7.3,6.0,5.5,5.4,6.5,6.2,5.4,5.1,6.5,5.5,8.9,12.7,11.0,12.2,13.6,15.8,13.0,14.8,14.5,17.6,16.6,16.4,14.9,12.8,10.4,8.9,8.5,7.5,7.7,7.4,6.9,7.1,8.7,9.2,7.3,6.7,7.0,6.9,6.0,4.5,4.6,4.9,5.4,5.8,6.4,6.4,5.9,6.0,4.6,7.3,5.9,4.3,3.6,3.9,3.3,2.7,2.5,2.4,1.6,0.7,0.5,1.4,2.5,2.9,3.2,4.2,5.5,5.8,6.3,6.4,6.4,6.3,6.3,6.6,6.9,6.9,6.9,6.5,6.5,6.5,6.2,6.6,7.2,8.6,9.4,9.4,9.4,9.7,10.3,10.8,10.8,10.5,9.8,9.0,8.4,8.4,8.4,7.9,7.6,7.3,6.3,5.4,4.7,4.9,5.0,5.4,5.4,5.7,5.9,6.8,8.4,9.3,9.3,8.9,8.6,8.6,8.2,7.8,6.9,5.8,5.1,4.7,4.7,4.3,4.0,3.6,3.3,3.0,2.6,2.4,2.4,2.9,3.1,3.6,4.8,5.8,6.0,5.6,5.3,5.3,5.5,5.6,5.9,6.1,6.7]}}
    ''';
    return rawJsonResults;
  }

  group(
      'Test the implementation class of HourlyWeatherForecastRemoteDataSourceImpl',
      () {
    test(
        'Given the instance of HourlyWeatherForecastRemoteDataSourceImpl, '
        'When the required instance of HttpClient was accessed, '
        'Then it should verify the interaction of its instance.', () async {
      // ARRANGE
      when(
        () => httpClient.get(
          any(that: isA<Uri>()),
          headers: any(named: 'headers'),
        ),
      ).thenAnswer((_) async => http.Response(buildJsonResults(), 200));

      // ACT
      final results = await hourlyWeatherForecastRemoteDataSourceImpl
          .getHourlyWeatherForecast(
        latitude: 52.52,
        longitude: 13.419998,
      );

      // ASSERT
      verify(
        () => httpClient.get(
          any(that: isA<Uri>()),
          headers: any(named: 'headers'),
        ),
      );
    });

    test(
        'Given the instance of HourlyWeatherForecastRemoteDataSourceImpl, '
        'When the method of getHourlyWeatherForecast was accessed '
        'with the valid input parameters, '
        'Then it should return the Future of HourlyWeatherForecastModel',
        () async {
      // ARRANGE
      when(
        () => httpClient.get(
          any(that: isA<Uri>()),
          headers: any(named: 'headers'),
        ),
      ).thenAnswer((_) async => http.Response(buildJsonResults(), 200));

      // ACT
      final results = await hourlyWeatherForecastRemoteDataSourceImpl
          .getHourlyWeatherForecast(
        latitude: 52.52,
        longitude: 13.419998,
      );

      // ASSERT
      expect(results, isA<HourlyWeatherForecastModel>());
      verify(
        () => httpClient.get(
          any(that: isA<Uri>()),
          headers: any(named: 'headers'),
        ),
      );
    });

    test(
        'Given the instance of HourlyWeatherForecastRemoteDataSourceImpl, '
        'When the method of getHourlyWeatherForecast was accessed '
        'with the valid input parameters, '
        'Then it should throw the ServerException '
        'if the operation results was failed because of Internet Connection.',
        () async {
      // ARRANGE
      when(
        () => httpClient.get(
          any(that: isA<Uri>()),
          headers: any(named: 'headers'),
        ),
      ).thenThrow(const ServerException());

      // ACT
      final results =
          hourlyWeatherForecastRemoteDataSourceImpl.getHourlyWeatherForecast;

      // ASSERT
      expect(
        () => results(
          latitude: 52.52,
          longitude: 13.419998,
        ),
        throwsA(isA<ServerException>()),
      );
      verify(
        () => httpClient.get(
          any(that: isA<Uri>()),
          headers: any(named: 'headers'),
        ),
      );
    });

    test(
        'Given the instance of HourlyWeatherForecastRemoteDataSourceImpl, '
        'When the method of getHourlyWeatherForecast was accessed '
        'with the valid input parameters, '
        'Then it should throw the UnexpectedException '
        'if the operation results was failed because of unknown error.',
        () async {
      // ARRANGE
      when(
        () => httpClient.get(
          any(that: isA<Uri>()),
          headers: any(named: 'headers'),
        ),
      ).thenThrow(const UnexpectedException());

      // ACT
      final results =
          hourlyWeatherForecastRemoteDataSourceImpl.getHourlyWeatherForecast;

      // ASSERT
      expect(
        () => results(
          latitude: 52.52,
          longitude: 13.419998,
        ),
        throwsA(isA<UnexpectedException>()),
      );
      verify(
        () => httpClient.get(
          any(that: isA<Uri>()),
          headers: any(named: 'headers'),
        ),
      );
    });
  });
}
