import 'dart:convert';

import 'package:flutter_test/flutter_test.dart';
import 'package:flutter_weather_sense_mvvm_bloc/features/home/models/hourly_weather_forecast_model/hourly_next_weather.dart';

void main() async {
  String buildRawJsonResults() {
    return '''
    {"time":["2023-05-23T00:00","2023-05-23T01:00","2023-05-23T02:00","2023-05-23T03:00","2023-05-23T04:00","2023-05-23T05:00","2023-05-23T06:00","2023-05-23T07:00","2023-05-23T08:00","2023-05-23T09:00","2023-05-23T10:00","2023-05-23T11:00","2023-05-23T12:00","2023-05-23T13:00","2023-05-23T14:00","2023-05-23T15:00","2023-05-23T16:00","2023-05-23T17:00","2023-05-23T18:00","2023-05-23T19:00","2023-05-23T20:00","2023-05-23T21:00","2023-05-23T22:00","2023-05-23T23:00","2023-05-24T00:00","2023-05-24T01:00","2023-05-24T02:00","2023-05-24T03:00","2023-05-24T04:00","2023-05-24T05:00","2023-05-24T06:00","2023-05-24T07:00","2023-05-24T08:00","2023-05-24T09:00","2023-05-24T10:00","2023-05-24T11:00","2023-05-24T12:00","2023-05-24T13:00","2023-05-24T14:00","2023-05-24T15:00","2023-05-24T16:00","2023-05-24T17:00","2023-05-24T18:00","2023-05-24T19:00","2023-05-24T20:00","2023-05-24T21:00","2023-05-24T22:00","2023-05-24T23:00","2023-05-25T00:00","2023-05-25T01:00","2023-05-25T02:00","2023-05-25T03:00","2023-05-25T04:00","2023-05-25T05:00","2023-05-25T06:00","2023-05-25T07:00","2023-05-25T08:00","2023-05-25T09:00","2023-05-25T10:00","2023-05-25T11:00","2023-05-25T12:00","2023-05-25T13:00","2023-05-25T14:00","2023-05-25T15:00","2023-05-25T16:00","2023-05-25T17:00","2023-05-25T18:00","2023-05-25T19:00","2023-05-25T20:00","2023-05-25T21:00","2023-05-25T22:00","2023-05-25T23:00","2023-05-26T00:00","2023-05-26T01:00","2023-05-26T02:00","2023-05-26T03:00","2023-05-26T04:00","2023-05-26T05:00","2023-05-26T06:00","2023-05-26T07:00","2023-05-26T08:00","2023-05-26T09:00","2023-05-26T10:00","2023-05-26T11:00","2023-05-26T12:00","2023-05-26T13:00","2023-05-26T14:00","2023-05-26T15:00","2023-05-26T16:00","2023-05-26T17:00","2023-05-26T18:00","2023-05-26T19:00","2023-05-26T20:00","2023-05-26T21:00","2023-05-26T22:00","2023-05-26T23:00","2023-05-27T00:00","2023-05-27T01:00","2023-05-27T02:00","2023-05-27T03:00","2023-05-27T04:00","2023-05-27T05:00","2023-05-27T06:00","2023-05-27T07:00","2023-05-27T08:00","2023-05-27T09:00","2023-05-27T10:00","2023-05-27T11:00","2023-05-27T12:00","2023-05-27T13:00","2023-05-27T14:00","2023-05-27T15:00","2023-05-27T16:00","2023-05-27T17:00","2023-05-27T18:00","2023-05-27T19:00","2023-05-27T20:00","2023-05-27T21:00","2023-05-27T22:00","2023-05-27T23:00","2023-05-28T00:00","2023-05-28T01:00","2023-05-28T02:00","2023-05-28T03:00","2023-05-28T04:00","2023-05-28T05:00","2023-05-28T06:00","2023-05-28T07:00","2023-05-28T08:00","2023-05-28T09:00","2023-05-28T10:00","2023-05-28T11:00","2023-05-28T12:00","2023-05-28T13:00","2023-05-28T14:00","2023-05-28T15:00","2023-05-28T16:00","2023-05-28T17:00","2023-05-28T18:00","2023-05-28T19:00","2023-05-28T20:00","2023-05-28T21:00","2023-05-28T22:00","2023-05-28T23:00","2023-05-29T00:00","2023-05-29T01:00","2023-05-29T02:00","2023-05-29T03:00","2023-05-29T04:00","2023-05-29T05:00","2023-05-29T06:00","2023-05-29T07:00","2023-05-29T08:00","2023-05-29T09:00","2023-05-29T10:00","2023-05-29T11:00","2023-05-29T12:00","2023-05-29T13:00","2023-05-29T14:00","2023-05-29T15:00","2023-05-29T16:00","2023-05-29T17:00","2023-05-29T18:00","2023-05-29T19:00","2023-05-29T20:00","2023-05-29T21:00","2023-05-29T22:00","2023-05-29T23:00"],"temperature_2m":[18.2,17.3,16.7,16.3,15.9,15.8,15.4,15.0,14.6,14.6,15.9,17.7,20.0,22.0,22.0,20.6,19.4,17.4,15.2,15.2,14.6,14.1,13.8,13.3,12.5,11.8,10.0,8.8,8.1,7.7,7.8,8.4,9.5,10.7,11.7,12.6,13.9,14.5,15.2,16.2,17.1,17.5,17.5,17.4,16.7,15.6,14.4,13.5,13.2,12.5,11.8,11.2,10.6,10.2,10.0,10.8,12.3,14.3,16.2,17.8,19.2,20.0,20.6,21.0,21.3,21.9,22.2,21.6,20.4,19.3,17.6,16.1,14.8,14.0,13.4,12.6,11.9,11.6,11.7,12.2,13.0,14.4,16.2,17.8,19.0,20.1,21.0,21.6,21.9,21.9,21.5,20.7,19.7,18.3,16.7,15.2,14.0,12.9,12.0,11.2,10.5,10.2,10.5,11.1,12.2,13.9,16.2,18.1,19.5,20.6,21.4,22.0,22.3,22.3,21.9,21.1,20.6,19.7,18.3,17.0,16.2,15.5,14.9,14.3,13.7,13.5,13.9,14.8,15.9,17.6,19.7,21.4,22.5,23.2,23.8,24.4,24.8,24.9,24.9,24.5,23.8,22.5,20.8,19.1,17.5,15.9,14.6,13.8,13.2,13.0,12.9,13.2,13.9,15.5,17.5,19.5,21.3,23.1,24.0,23.7,22.5,21.3,20.3,19.3,18.5,18.0,17.6,17.3],"relativehumidity_2m":[45,50,55,58,61,63,66,71,76,77,73,63,55,48,50,67,73,78,76,75,72,69,72,71,68,72,71,73,76,78,78,76,72,68,66,62,56,55,52,49,45,42,44,45,48,56,62,66,67,71,74,77,82,86,89,87,81,73,66,56,48,41,40,40,41,37,36,38,49,53,53,52,55,62,68,71,72,72,71,70,66,59,51,44,39,35,33,33,33,35,37,39,42,48,55,61,65,68,70,73,75,76,75,73,68,59,49,40,35,32,30,27,25,25,27,31,34,39,46,52,56,59,61,63,65,65,63,58,53,45,37,30,27,26,26,25,24,24,24,25,27,33,40,47,52,57,62,67,72,74,73,70,66,62,57,53,49,47,47,52,60,68,74,80,84,87,90,91],"dewpoint_2m":[6.1,6.8,7.7,8.0,8.4,8.8,9.1,9.8,10.5,10.7,11.1,10.6,10.7,10.5,11.1,14.3,14.4,13.5,11.0,10.8,9.6,8.5,8.8,8.2,6.7,7.0,5.0,4.3,4.1,4.1,4.2,4.5,4.7,5.1,5.6,5.5,5.3,5.6,5.4,5.5,5.1,4.5,5.2,5.3,5.6,6.8,7.3,7.3,7.2,7.4,7.4,7.4,7.7,8.0,8.3,8.7,9.2,9.5,9.8,8.9,7.9,6.3,6.5,6.9,7.5,6.5,6.4,6.7,9.3,9.5,7.9,6.2,5.8,6.9,7.7,7.5,7.0,6.7,6.6,6.9,6.8,6.5,6.0,5.4,4.8,4.2,4.1,4.6,4.9,5.7,6.2,6.2,6.4,7.1,7.6,7.7,7.5,7.2,6.7,6.5,6.2,6.2,6.2,6.4,6.5,6.1,5.5,4.3,3.6,3.3,3.1,2.2,1.3,1.3,2.0,3.3,4.2,5.4,6.5,7.1,7.4,7.5,7.5,7.3,7.2,7.1,7.0,6.6,6.3,5.5,4.6,3.1,2.5,2.6,3.2,3.1,2.8,3.0,2.9,3.2,3.7,5.4,6.7,7.5,7.5,7.4,7.4,7.7,8.3,8.4,8.2,7.8,7.7,8.2,8.9,9.6,10.2,11.1,12.0,13.2,14.4,15.2,15.5,15.8,15.8,15.8,16.0,15.8],"apparent_temperature":[16.1,15.3,15.0,14.8,15.0,15.3,14.7,14.2,14.3,14.4,15.9,16.8,19.1,21.9,20.5,19.3,18.2,15.5,12.5,12.5,12.0,11.6,11.8,11.3,9.9,9.3,6.7,5.6,5.1,4.9,5.0,5.6,6.6,8.0,9.1,10.2,11.3,11.8,12.6,13.7,14.6,14.9,15.1,15.0,14.3,13.7,13.0,12.2,11.6,11.0,10.4,9.9,9.4,9.1,8.8,9.8,11.3,13.2,15.2,17.1,18.3,18.2,18.4,18.7,19.1,19.9,19.9,19.1,18.7,17.8,15.6,13.8,12.7,12.4,11.9,11.1,10.4,9.9,9.9,10.3,11.0,12.2,13.8,16.0,17.6,18.9,19.8,20.3,20.2,19.7,19.0,18.2,17.2,16.1,14.7,13.3,12.2,11.3,10.4,9.6,8.8,8.6,8.8,9.3,10.2,11.8,13.9,16.4,18.1,19.3,20.0,20.1,19.7,19.0,18.3,17.9,17.7,17.9,16.7,15.7,15.0,14.3,13.7,13.1,12.5,12.3,12.8,13.5,14.6,16.0,17.7,19.8,21.5,22.6,23.4,23.9,24.0,23.6,23.0,22.6,21.9,20.9,19.4,17.8,16.1,14.1,12.6,11.8,11.6,11.6,11.4,11.4,12.0,13.6,15.8,17.9,20.5,22.8,24.0,23.7,22.4,21.6,20.8,19.8,18.9,18.3,18.0,17.6],"precipitation_probability":[0,0,0,3,7,10,28,47,65,70,76,81,68,55,42,54,65,77,61,45,29,21,14,6,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,2,1,0,0,0,0,1,2,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,3,3,2,1,0,0,0,0,1,2,3,5,8,10,14,19,23,22,20,19,17,15,13],"weathercode":[3,3,3,3,3,3,61,61,61,61,3,2,2,2,2,80,3,80,61,3,3,3,3,3,2,2,2,1,3,3,3,3,3,3,3,3,3,3,3,2,2,2,1,1,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,1,2,3,3,3,2,1,2,3,2,2,1,2,3,3,3,2,2,2,0,0,0,0,0,0,0,0,0,1,1,1,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,80,80,80,95,95,95,95,95,95],"surface_pressure":[1008.9,1008.5,1008.2,1007.7,1007.5,1007.6,1007.2,1007.1,1006.9,1007.3,1007.4,1007.3,1007.3,1007.0,1007.0,1007.2,1007.5,1008.2,1009.0,1009.5,1010.0,1010.6,1011.0,1011.6,1012.1,1012.5,1012.8,1013.0,1013.0,1013.2,1013.5,1013.9,1014.1,1014.5,1014.7,1015.0,1015.2,1015.4,1015.4,1015.3,1015.2,1015.2,1015.2,1015.3,1015.5,1016.0,1016.8,1017.2,1017.1,1017.3,1017.3,1017.4,1017.6,1017.8,1018.1,1018.3,1018.8,1019.0,1019.2,1019.3,1019.4,1019.1,1018.7,1018.3,1018.0,1017.7,1017.3,1017.3,1017.7,1018.5,1019.0,1019.5,1019.8,1020.0,1020.1,1020.3,1020.4,1020.7,1021.0,1021.4,1021.8,1022.0,1022.0,1022.0,1022.0,1021.7,1021.5,1021.3,1021.0,1020.9,1020.9,1021.0,1021.3,1021.8,1022.5,1023.2,1023.6,1023.9,1024.1,1024.2,1024.1,1024.1,1024.3,1024.5,1024.7,1024.8,1024.7,1024.5,1024.2,1023.8,1023.3,1022.8,1022.2,1021.7,1021.4,1021.1,1021.0,1018.6,1018.4,1018.1,1017.9,1017.7,1017.4,1017.1,1016.7,1016.4,1016.2,1016.1,1015.9,1015.7,1015.4,1015.0,1014.5,1014.0,1013.3,1012.6,1011.8,1011.2,1010.8,1010.5,1010.3,1010.2,1010.1,1010.1,1010.0,1009.8,1009.5,1009.2,1008.8,1008.6,1008.6,1008.8,1008.9,1008.9,1008.7,1008.4,1008.0,1007.5,1007.2,1007.1,1007.2,1007.4,1007.5,1007.8,1008.1,1008.3,1008.3,1008.4],"visibility":[24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,12700.00,17320.00,24140.00,12120.00,24140.00,24140.00,24140.00,24140.00,20680.00,19100.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,22620.00,21100.00,19580.00],"windspeed_10m":[7.3,8.7,7.5,6.7,3.5,1.3,3.6,5.4,3.1,3.1,2.8,7.6,10.3,10.0,12.9,18.7,18.2,20.6,20.6,20.6,17.1,14.5,11.5,10.5,12.0,12.2,14.5,12.6,11.1,10.0,9.8,10.2,11.2,10.5,10.6,9.0,9.8,10.7,10.5,9.5,9.2,8.8,8.8,8.9,8.9,7.1,4.9,4.6,5.6,5.3,5.0,4.8,4.3,4.0,4.7,4.8,5.4,6.9,7.7,9.1,9.8,10.0,9.7,10.5,10.8,7.7,9.7,11.0,10.2,9.4,9.9,9.2,7.0,5.6,6.3,6.0,5.5,5.6,6.4,7.6,8.7,9.2,9.8,10.1,10.3,10.8,10.9,10.7,10.6,10.5,10.4,10.8,10.5,10.0,9.6,8.9,7.7,6.1,5.3,4.8,4.8,5.0,5.4,6.3,7.3,7.8,7.7,8.0,8.8,10.0,10.9,11.6,12.3,12.6,12.1,11.3,10.5,4.8,4.4,4.0,3.6,3.8,3.5,3.2,3.2,2.9,2.6,2.6,2.6,3.6,4.6,5.6,5.6,5.6,5.2,4.2,2.6,1.5,1.4,2.3,3.1,3.3,3.6,4.0,5.0,7.7,9.5,9.2,7.8,6.9,7.2,8.3,9.1,9.3,9.7,9.9,10.7,12.0,13.0,12.2,10.8,9.9,9.9,10.4,10.8,11.3,11.7,12.1]}
    ''';
  }

  HourlyNextWeather buildHourlyNextWeather() {
    return HourlyNextWeather.fromJson(
      json.decode(buildRawJsonResults()) as Map<String, dynamic>,
    );
  }

  String buildJsonHourlyNextWeather() {
    final hourlyNextWeather = buildHourlyNextWeather();
    final mappedHourlyNextWeather = hourlyNextWeather.toJson();
    return json.encode(mappedHourlyNextWeather);
  }

  group("Test Hourly Next Weather.", () {
    test(
      'Given the raw data of JSON results from API, '
      'When the raw data was converted into JSON object, '
      'Then it should return a valid HourlyNextWeather object .',
      () async {
        /// ARRANGE
        /// ACT
        final results = buildHourlyNextWeather();

        /// ASSERT
        expect(results, isA<HourlyNextWeather>());
      },
    );

    test(
      'Given the raw data of JSON results from API, '
      'When the fromJson factory constructor of HourlyNextWeather was accessed, '
      'Then it should return a valid object of HourlyNextWeather subtype .',
      () async {
        /// ARRANGE
        /// ACT
        final rawJson = buildRawJsonResults();
        final results = HourlyNextWeather.fromJson(
          json.decode(buildRawJsonResults()) as Map<String, dynamic>,
        );

        /// ASSERT
        expect(rawJson, isA<String>());
        expect(results, isA<HourlyNextWeather>());
      },
    );

    test(
      'Given the object model of HourlyNextWeather, '
      'When the defaultValue factory method of HourlyNextWeather was accessed, '
      'Then it should return a valid object of HourlyNextWeather subtype.',
      () async {
        /// ARRANGE
        /// ACT
        final results = HourlyNextWeather.defaultValue();

        /// ASSERT
        expect(results, isA<HourlyNextWeather>());
      },
    );

    test(
      'Given the object model of HourlyNextWeather, '
      'When the toJson method of HourlyNextWeather was accessed, '
      'Then it should return a valid JSON string object of HourlyNextWeather.',
      () async {
        /// ARRANGE
        /// ACT
        final model = buildHourlyNextWeather();
        final results = json.encode(model.toJson());

        /// ASSERT
        expect(model, isA<HourlyNextWeather>());
        expect(results, isA<String>());
        expect(results, equals(buildJsonHourlyNextWeather()));
      },
    );

    test(
      'Given the object model of HourlyNextWeather, '
      'When the copyWith method of HourlyNextWeather was accessed, '
      'Then it should return a valid modified object of HourlyNextWeather.',
      () async {
        /// ARRANGE
        /// ACT
        final model = buildHourlyNextWeather();
        final results = model.copyWith();

        /// ASSERT
        expect(model, isA<HourlyNextWeather>());
        expect(results, isA<HourlyNextWeather>());
      },
    );
  });
}
