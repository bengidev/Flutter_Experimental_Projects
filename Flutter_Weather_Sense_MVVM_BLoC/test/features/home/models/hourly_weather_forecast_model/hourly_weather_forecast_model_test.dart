import 'dart:convert';

import 'package:flutter_test/flutter_test.dart';
import 'package:flutter_weather_sense_mvvm_bloc/features/home/models/hourly_weather_forecast_model_barrel.dart';

void main() async {
  String buildRawJsonResults() {
    return '''
    {"latitude":52.52,"longitude":13.419998,"generationtime_ms":2.297043800354004,"utc_offset_seconds":7200,"timezone":"Europe/Berlin","timezone_abbreviation":"CEST","elevation":38.0,"current_weather":{"temperature":12.0,"windspeed":15.0,"winddirection":294.0,"weathercode":3,"is_day":0,"time":"2023-05-23T23:00"},"hourly_units":{"time":"iso8601","temperature_2m":"°C","relativehumidity_2m":"%","dewpoint_2m":"°C","apparent_temperature":"°C","precipitation_probability":"%","weathercode":"wmo code","surface_pressure":"hPa","visibility":"m","windspeed_10m":"km/h"},"hourly":{"time":["2023-05-23T00:00","2023-05-23T01:00","2023-05-23T02:00","2023-05-23T03:00","2023-05-23T04:00","2023-05-23T05:00","2023-05-23T06:00","2023-05-23T07:00","2023-05-23T08:00","2023-05-23T09:00","2023-05-23T10:00","2023-05-23T11:00","2023-05-23T12:00","2023-05-23T13:00","2023-05-23T14:00","2023-05-23T15:00","2023-05-23T16:00","2023-05-23T17:00","2023-05-23T18:00","2023-05-23T19:00","2023-05-23T20:00","2023-05-23T21:00","2023-05-23T22:00","2023-05-23T23:00","2023-05-24T00:00","2023-05-24T01:00","2023-05-24T02:00","2023-05-24T03:00","2023-05-24T04:00","2023-05-24T05:00","2023-05-24T06:00","2023-05-24T07:00","2023-05-24T08:00","2023-05-24T09:00","2023-05-24T10:00","2023-05-24T11:00","2023-05-24T12:00","2023-05-24T13:00","2023-05-24T14:00","2023-05-24T15:00","2023-05-24T16:00","2023-05-24T17:00","2023-05-24T18:00","2023-05-24T19:00","2023-05-24T20:00","2023-05-24T21:00","2023-05-24T22:00","2023-05-24T23:00","2023-05-25T00:00","2023-05-25T01:00","2023-05-25T02:00","2023-05-25T03:00","2023-05-25T04:00","2023-05-25T05:00","2023-05-25T06:00","2023-05-25T07:00","2023-05-25T08:00","2023-05-25T09:00","2023-05-25T10:00","2023-05-25T11:00","2023-05-25T12:00","2023-05-25T13:00","2023-05-25T14:00","2023-05-25T15:00","2023-05-25T16:00","2023-05-25T17:00","2023-05-25T18:00","2023-05-25T19:00","2023-05-25T20:00","2023-05-25T21:00","2023-05-25T22:00","2023-05-25T23:00","2023-05-26T00:00","2023-05-26T01:00","2023-05-26T02:00","2023-05-26T03:00","2023-05-26T04:00","2023-05-26T05:00","2023-05-26T06:00","2023-05-26T07:00","2023-05-26T08:00","2023-05-26T09:00","2023-05-26T10:00","2023-05-26T11:00","2023-05-26T12:00","2023-05-26T13:00","2023-05-26T14:00","2023-05-26T15:00","2023-05-26T16:00","2023-05-26T17:00","2023-05-26T18:00","2023-05-26T19:00","2023-05-26T20:00","2023-05-26T21:00","2023-05-26T22:00","2023-05-26T23:00","2023-05-27T00:00","2023-05-27T01:00","2023-05-27T02:00","2023-05-27T03:00","2023-05-27T04:00","2023-05-27T05:00","2023-05-27T06:00","2023-05-27T07:00","2023-05-27T08:00","2023-05-27T09:00","2023-05-27T10:00","2023-05-27T11:00","2023-05-27T12:00","2023-05-27T13:00","2023-05-27T14:00","2023-05-27T15:00","2023-05-27T16:00","2023-05-27T17:00","2023-05-27T18:00","2023-05-27T19:00","2023-05-27T20:00","2023-05-27T21:00","2023-05-27T22:00","2023-05-27T23:00","2023-05-28T00:00","2023-05-28T01:00","2023-05-28T02:00","2023-05-28T03:00","2023-05-28T04:00","2023-05-28T05:00","2023-05-28T06:00","2023-05-28T07:00","2023-05-28T08:00","2023-05-28T09:00","2023-05-28T10:00","2023-05-28T11:00","2023-05-28T12:00","2023-05-28T13:00","2023-05-28T14:00","2023-05-28T15:00","2023-05-28T16:00","2023-05-28T17:00","2023-05-28T18:00","2023-05-28T19:00","2023-05-28T20:00","2023-05-28T21:00","2023-05-28T22:00","2023-05-28T23:00","2023-05-29T00:00","2023-05-29T01:00","2023-05-29T02:00","2023-05-29T03:00","2023-05-29T04:00","2023-05-29T05:00","2023-05-29T06:00","2023-05-29T07:00","2023-05-29T08:00","2023-05-29T09:00","2023-05-29T10:00","2023-05-29T11:00","2023-05-29T12:00","2023-05-29T13:00","2023-05-29T14:00","2023-05-29T15:00","2023-05-29T16:00","2023-05-29T17:00","2023-05-29T18:00","2023-05-29T19:00","2023-05-29T20:00","2023-05-29T21:00","2023-05-29T22:00","2023-05-29T23:00"],"temperature_2m":[18.2,17.3,16.7,16.2,15.7,15.1,15.0,15.2,15.6,16.7,18.3,19.8,20.6,19.5,19.7,18.6,17.0,16.9,15.0,13.9,12.9,12.7,12.5,12.0,11.2,10.4,9.5,8.8,8.2,7.7,7.6,8.6,9.5,10.7,11.4,12.1,12.6,13.4,14.6,14.9,15.7,16.3,16.4,16.1,15.4,14.2,12.8,11.9,11.2,10.6,10.2,9.8,9.4,9.1,9.1,10.2,11.9,13.9,16.2,17.9,19.1,19.8,19.1,18.7,18.7,20.1,19.9,19.5,17.9,16.8,15.0,13.6,12.5,11.6,10.9,10.3,9.8,9.3,9.1,9.6,10.7,12.2,13.5,14.8,15.9,17.0,17.7,18.1,18.4,18.2,17.6,16.8,15.8,14.7,13.4,12.4,11.7,11.2,10.9,10.2,9.6,9.3,9.6,10.3,11.3,12.7,14.3,15.8,16.9,17.8,18.6,19.1,19.5,19.7,19.5,19.1,18.5,17.5,16.2,15.1,14.4,13.8,13.3,12.6,12.1,11.9,12.4,13.2,14.3,15.9,17.7,19.2,20.1,20.7,21.1,21.3,21.4,21.3,20.8,20.2,19.7,21.8,19.7,17.8,16.2,14.9,13.8,12.8,12.0,11.7,12.0,12.7,13.8,15.3,17.2,18.8,20.0,20.9,21.5,21.9,22.0,21.8,21.1,20.1,18.8,17.3,15.6,14.0],"relativehumidity_2m":[45,50,55,58,61,66,68,70,68,65,58,59,59,70,65,71,80,79,78,77,78,80,77,74,71,73,76,78,78,81,83,80,76,70,66,64,63,60,56,55,52,48,49,51,56,65,74,81,83,85,85,87,88,90,89,84,76,69,63,56,51,46,56,58,57,50,49,38,42,50,57,66,70,74,78,82,85,86,85,80,76,68,58,50,49,46,45,46,43,42,42,45,50,55,62,66,69,72,74,77,79,80,79,75,71,64,57,50,46,43,41,40,39,40,42,45,49,54,60,64,66,68,69,71,73,73,72,70,66,60,53,47,44,44,43,42,41,41,42,43,44,41,50,57,58,57,58,63,69,73,74,73,70,64,56,49,46,44,41,36,29,27,31,39,46,49,51,55],"dewpoint_2m":[6.1,6.8,7.6,7.9,8.2,8.8,9.1,9.8,9.8,10.1,9.9,11.6,12.3,13.9,12.9,13.2,13.6,13.3,11.2,9.9,9.2,9.3,8.6,7.6,6.2,5.8,5.5,5.2,4.6,4.6,4.9,5.3,5.5,5.4,5.3,5.5,5.7,5.8,5.9,5.9,5.9,5.3,5.7,6.0,6.7,7.7,8.3,8.8,8.4,8.2,7.8,7.8,7.6,7.5,7.4,7.6,7.8,8.3,9.1,9.0,8.7,7.9,10.1,10.3,10.0,9.3,8.9,4.8,4.8,6.3,6.5,7.4,7.2,7.2,7.2,7.4,7.4,7.1,6.7,6.4,6.6,6.5,5.4,4.5,5.2,5.3,5.6,6.3,5.6,5.1,4.5,4.8,5.4,5.8,6.3,6.2,6.2,6.4,6.4,6.4,6.1,6.1,6.2,6.1,6.2,6.1,5.9,5.4,5.2,5.1,5.1,5.2,5.2,5.7,6.3,6.9,7.6,8.1,8.5,8.4,8.1,8.0,7.7,7.5,7.4,7.3,7.5,7.9,8.1,8.1,8.0,7.6,7.5,8.0,8.0,7.9,7.6,7.5,7.5,7.2,7.1,8.0,9.0,9.1,7.9,6.5,5.6,5.9,6.5,7.0,7.5,8.0,8.4,8.5,8.4,7.9,8.0,8.2,7.7,6.1,3.2,1.9,3.3,5.7,7.0,6.5,5.5,5.1],"apparent_temperature":[16.1,15.3,15.0,14.6,14.1,14.2,14.2,14.6,15.1,15.9,16.9,19.2,19.3,18.4,18.4,17.1,16.1,15.7,12.5,11.0,10.0,10.8,10.3,9.2,8.2,7.2,6.4,5.9,5.5,5.2,5.3,6.2,7.2,8.1,8.8,9.5,10.3,11.0,12.5,12.8,13.3,14.1,14.1,13.8,13.5,12.7,11.7,10.9,9.9,9.3,8.8,8.4,7.9,7.5,7.6,8.7,10.2,12.5,15.1,17.1,18.7,18.7,17.4,17.2,17.7,18.2,17.7,16.4,15.0,14.4,12.7,11.8,10.8,10.0,9.3,8.8,8.3,7.6,7.3,7.5,8.5,9.9,11.1,12.9,14.8,16.0,16.6,16.7,16.4,15.4,14.5,13.8,13.1,12.3,11.3,10.4,9.9,9.6,9.4,8.8,8.0,7.8,8.0,8.7,9.6,11.0,12.6,14.8,16.5,17.6,18.4,18.9,18.8,18.4,17.9,17.6,17.1,16.3,15.3,14.3,13.5,12.9,12.4,11.7,11.2,11.0,11.5,12.5,13.7,15.2,16.8,18.9,20.2,21.0,21.2,20.9,20.1,19.8,19.2,18.4,17.8,20.1,17.9,15.8,14.0,12.6,11.4,10.6,9.9,9.7,10.1,10.8,11.9,13.4,15.3,17.4,19.1,20.3,20.8,20.5,19.5,18.3,17.7,17.0,16.1,14.6,12.7,11.2],"precipitation_probability":[0,0,0,3,7,10,25,40,55,48,42,35,46,57,68,73,79,84,67,49,32,22,13,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,2,1,0,0,0,0,1,2,3,2,1,0,1,2,3,5,8,10,10,10,10,10,10,10],"weathercode":[3,3,3,3,3,3,3,3,61,2,2,2,3,3,80,3,61,80,3,3,3,3,3,3,3,3,2,2,2,2,3,2,3,3,3,3,3,3,2,2,3,2,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,2,2,3,3,3,3,2,0,1,1,0,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,2,2,1,2,2,2,2,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,2,2,2,0,0,0,0,0,0,0,0,0,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,1,1,1,3,3,3,3,3,3,2,2,2,1,1,1,0,0,0],"surface_pressure":[1008.9,1008.5,1008.3,1007.7,1007.6,1007.2,1007.1,1007.0,1006.6,1006.9,1006.9,1007.4,1007.3,1007.4,1007.6,1007.8,1008.1,1009.2,1009.6,1010.5,1011.2,1011.7,1012.2,1012.8,1013.3,1013.5,1013.6,1013.9,1013.8,1013.7,1013.9,1014.2,1014.6,1015.1,1015.6,1015.7,1015.8,1015.9,1016.2,1016.2,1016.1,1015.9,1015.7,1015.7,1016.0,1016.6,1017.2,1017.8,1018.0,1018.2,1018.3,1018.3,1018.3,1018.6,1018.9,1019.1,1019.3,1019.5,1019.7,1019.8,1020.0,1019.8,1019.7,1019.8,1019.7,1019.5,1019.3,1019.3,1019.6,1019.4,1020.0,1020.3,1020.6,1020.6,1020.7,1021.0,1021.2,1021.5,1021.7,1022.1,1022.3,1022.4,1022.6,1022.8,1022.7,1022.5,1022.2,1021.9,1021.8,1021.8,1021.9,1022.0,1022.3,1022.7,1023.1,1023.5,1024.0,1024.2,1024.2,1024.1,1023.9,1023.8,1023.9,1024.1,1024.2,1024.1,1024.0,1023.7,1023.2,1022.5,1021.9,1021.4,1020.7,1020.2,1019.8,1019.4,1019.1,1018.9,1018.8,1018.7,1018.4,1018.1,1017.8,1017.4,1017.1,1016.8,1016.7,1016.7,1016.6,1016.4,1016.2,1015.9,1015.5,1015.0,1014.5,1014.0,1013.5,1013.1,1012.8,1012.6,1012.5,1014.5,1014.9,1015.3,1015.4,1015.6,1015.7,1015.8,1015.8,1015.9,1016.2,1016.6,1017.0,1017.2,1017.4,1017.6,1017.5,1017.3,1017.2,1017.1,1017.1,1017.1,1017.3,1017.5,1017.9,1018.3,1018.8,1019.4],"visibility":[24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,19020.00,21360.00,22360.00,24140.00,24140.00,24140.00,24140.00,17240.00,22220.00,24140.00,8900.00,11900.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,23100.00,22040.00,21000.00,22040.00,23100.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00,24140.00],"windspeed_10m":[7.3,8.7,7.1,7.3,7.9,4.0,4.0,3.6,3.1,6.0,9.2,11.0,14.5,16.3,14.9,17.0,14.3,15.8,20.2,19.6,18.6,11.8,12.8,15.0,14.5,14.7,13.4,12.1,10.2,8.3,7.6,8.3,8.6,9.9,10.0,10.0,8.3,9.5,7.4,7.5,9.2,7.2,8.7,9.4,7.9,6.2,5.2,5.1,6.1,6.0,5.9,6.0,6.0,6.4,6.0,6.2,7.4,7.2,7.3,10.0,10.1,8.8,12.3,10.6,6.9,12.1,13.2,12.6,11.4,9.8,9.6,7.5,7.3,6.4,6.0,5.4,5.9,6.5,6.8,8.5,9.0,9.7,9.8,9.9,10.0,11.0,12.1,12.2,12.2,12.4,12.4,11.8,10.9,9.8,8.0,7.3,6.1,5.1,4.0,3.6,4.0,4.0,4.3,4.3,4.7,4.9,5.2,5.2,5.1,5.1,5.1,4.7,4.7,4.5,4.7,5.4,5.4,4.7,3.7,3.1,2.6,2.2,1.9,1.8,1.8,1.5,1.5,1.0,0.8,1.1,2.5,3.3,3.6,3.8,3.8,4.3,5.1,5.9,6.5,7.2,8.1,8.4,10.5,11.8,11.3,10.0,8.7,8.0,8.1,7.9,8.6,9.3,10.0,10.5,10.3,10.4,10.1,10.1,10.7,11.4,12.0,12.6,13.0,13.4,13.5,12.8,11.9,10.9]}}
    ''';
  }

  HourlyWeatherForecastModel buildHourlyWeatherForecastModel() {
    return HourlyWeatherForecastModel.fromJson(
      json.decode(buildRawJsonResults()) as Map<String, dynamic>,
    );
  }

  String buildJsonHourlyWeatherForecastModel() {
    final hourlyWeatherForecastModel = buildHourlyWeatherForecastModel();
    final mappedHourlyWeatherForecastModel =
        hourlyWeatherForecastModel.toJson();
    return json.encode(mappedHourlyWeatherForecastModel);
  }

  group("Test HourlyWeatherForecastModel.", () {
    test(
      'Given the raw data of JSON results from API, '
      'When the raw data was converted into JSON object, '
      'Then it should return a valid HourlyWeatherForecastModel object .',
      () async {
        /// ARRANGE
        /// ACT
        final results = buildHourlyWeatherForecastModel();

        /// ASSERT
        expect(results, isA<HourlyWeatherForecastModel>());
      },
    );

    test(
      'Given the raw data of JSON results from API, '
      'When the fromJson factory constructor of HourlyWeatherForecastModel was accessed, '
      'Then it should return a valid object of HourlyWeatherForecastModel subtype .',
      () async {
        /// ARRANGE
        /// ACT
        final rawJson = buildRawJsonResults();
        final results = HourlyWeatherForecastModel.fromJson(
          json.decode(buildRawJsonResults()) as Map<String, dynamic>,
        );

        /// ASSERT
        expect(rawJson, isA<String>());
        expect(results, isA<HourlyWeatherForecastModel>());
      },
    );

    test(
      'Given the object model of HourlyWeatherForecastModel, '
      'When the defaultValue factory method of HourlyWeatherForecastModel was accessed, '
      'Then it should return a valid object of HourlyWeatherForecastModel subtype.',
      () async {
        /// ARRANGE
        /// ACT
        final results = HourlyWeatherForecastModel.defaultValue();

        /// ASSERT
        expect(results, isA<HourlyWeatherForecastModel>());
      },
    );

    test(
      'Given the object model of HourlyWeatherForecastModel, '
      'When the toJson method of HourlyWeatherForecastModel was accessed, '
      'Then it should return a valid JSON string object of HourlyWeatherForecastModel.',
      () async {
        /// ARRANGE
        /// ACT
        final model = buildHourlyWeatherForecastModel();
        final results = json.encode(model.toJson());

        /// ASSERT
        expect(model, isA<HourlyWeatherForecastModel>());
        expect(results, isA<String>());
        expect(results, equals(buildJsonHourlyWeatherForecastModel()));
      },
    );

    test(
      'Given the object model of HourlyWeatherForecastModel, '
      'When the copyWith method of HourlyWeatherForecastModel was accessed, '
      'Then it should return a valid modified object of HourlyWeatherForecastModel.',
      () async {
        /// ARRANGE
        /// ACT
        final model = buildHourlyWeatherForecastModel();
        final results = model.copyWith();

        /// ASSERT
        expect(model, isA<HourlyWeatherForecastModel>());
        expect(results, isA<HourlyWeatherForecastModel>());
      },
    );
  });
}
