name: flutter_weather_sense_mvvm_bloc
description: A new Flutter project named Weather Sense using the implementation of MVVM Architecture with BLoC Patterns.
# The following line prevents the package from being accidentally published to
# pub.dev using `flutter pub publish`. This is preferred for private packages.
publish_to: 'none' # Remove this line if you wish to publish to pub.dev

# The following defines the version and build number for your application.
# A version number is three numbers separated by dots, like 1.2.43
# followed by an optional build number separated by a +.
# Both the version and the builder number may be overridden in flutter
# build by specifying --build-name and --build-number, respectively.
# In Android, build-name is used as versionName while build-number used as versionCode.
# Read more about Android versioning at https://developer.android.com/studio/publish/versioning
# In iOS, build-name is used as CFBundleShortVersionString while build-number is used as CFBundleVersion.
# Read more about iOS versioning at
# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html
# In Windows, build-name is used as the major, minor, and patch parts
# of the product and file versions while build-number is used as the build suffix.
version: 1.0.0+1

environment:
  sdk: '>=2.17.0 <4.0.0'



# Dependencies specify other packages that your package needs in order to work.
# To automatically upgrade your package dependencies to the latest versions
# consider running `flutter pub upgrade --major-versions`. Alternatively,
# dependencies can be manually updated by changing the version numbers below to
# the latest version available on pub.dev. To see which dependencies have newer
# versions available, run `flutter pub outdated`.
dependencies:
  # Flutter widget that automatically resizes text to fit perfectly within its bounds.
  auto_size_text: ^3.0.0

  # A testing library which makes it easy to test blocs.
  # Built to be used with the bloc state management package.
  bloc_test: ^9.1.1

  # Coverage data manipulation and formatting.
  coverage: ^1.6.3

  # The following adds the Cupertino Icons font to your application.
  # Use with the CupertinoIcons class for iOS style icons.
  cupertino_icons: ^1.0.5

  # Functional Programming in Dart.
  # Purify your Dart code using efficient immutable data structures, monads, lenses and other FP tools.
  dartz: ^0.10.1

  # A Dart package that helps to implement value based equality without needing to
  # explicitly override == and hashCode.
  equatable: ^2.0.5

  # Additional alignments to help make your layouts more readable (TopLeft, TopRight, etc).
  extra_alignments: ^1.0.0+1

  # A collection of Flex widgets (Columns and Rows) with additional functionality.
  flextras: ^1.0.0

  # Core dependencies for using Flutter.
  flutter:
    sdk: flutter

  # Add beautiful animated effects & builders in Flutter, via an easy, customizable, unified API.
  flutter_animate: ^4.1.1+1

  # Flutter Widgets that make it easy to implement the BLoC (Business Logic Component) design pattern.
  # Built to be used with the bloc state management package.
  flutter_bloc: ^8.1.2

  # A flutter implementation of React hooks. It adds a new kind of widget with enhanced code reuse.
  flutter_hooks: ^0.18.6

  # A package which simplifies the task of updating your Flutter app's launcher icon.
  flutter_launcher_icons: ^0.11.0

  # Customize Flutter's default white native splash screen with background color and splash image.
  # Supports dark mode, full screen, and more.
  flutter_native_splash: ^2.2.16

  # An SVG rendering and widget library for Flutter, which allows painting and
  # displaying Scalable Vector Graphics 1.1 files.
  flutter_svg: ^2.0.5

  # Flutter widgets for easily adding gaps inside Flex widgets such as Columns and Rows or scrolling views.
  gap: ^3.0.0

  # Simple direct Service Locator that allows to decouple the interface from a concrete implementation and
  # to access the concrete implementation from everywhere in your App
  get_it: ^7.6.0

  # A declarative router for Flutter based on Navigation 2.
  # Supporting deep linking, data-driven routes and more.
  go_router: ^7.0.1

  # A Flutter package to use fonts from fonts.google.com.
  # Supports HTTP fetching, caching, and asset bundling.
  google_fonts: ^4.0.4

  # A composable, multi-platform, Future-based API for HTTP requests.
  http: ^0.13.6

  # A pure Dart library that checks for internet by opening a socket
  # to a list of specified addresses, each with individual port and timeout.
  # Defaults are provided for convenience.
  internet_connection_checker: ^1.0.0+1

  # A Flutter plugin for integrating Mapbox Maps inside a Flutter application
  # on Android, iOS and web platforms.
  mapbox_gl: ^0.16.0

  # Permission plugin for Flutter.
  # This plugin provides a cross-platform (iOS, Android) API to request and check permissions.
  permission_handler: ^10.2.0

  # Flutter plugin for reading and writing simple key-value pairs.
  # Wraps NSUserDefaults on iOS and SharedPreferences on Android.
  shared_preferences: ^2.1.1

  # Access MediaQuery sizing info directly on the context,
  # also adds some helper methods for sizing and layout.
  sized_context: ^1.0.0+4

  # Customizable animated page indicator with a set of built-in effects.
  smooth_page_indicator: ^1.1.0

  # A widget that detects the visibility of its child and notifies a callback.
  visibility_detector: ^0.4.0+2



dev_dependencies:
  # Core dependencies for using Flutter Test.
  flutter_test:
    sdk: flutter

  # An opinionated, community-driven set of lint rules for Dart and Flutter projects.
  # Like pedantic but stricter.
  lint: ^2.0.1

  # A Dart mock library which simplifies mocking with null safety support and
  # no manual mocks or code generation.
  mocktail: ^0.3.0

# For information on the generic Dart part of this file, see the
# following page: https://dart.dev/tools/pub/pubspec

# The following section is specific to Flutter packages.
flutter:

  # The following line ensures that the Material Icons font is
  # included with your application, so that you can use the icons in
  # the material Icons class.
  uses-material-design: true

  # To add assets to your application, add an assets section, like this:
  assets:
    - assets/
    - assets/images/
  #   - images/a_dot_burr.jpeg
  #   - images/a_dot_ham.jpeg

  # An image asset can refer to one or more resolution-specific "variants", see
  # https://flutter.dev/assets-and-images/#resolution-aware

  # For details regarding adding assets from package dependencies, see
  # https://flutter.dev/assets-and-images/#from-packages

  # To add custom fonts to your application, add a fonts section here,
  # in this "flutter" section. Each entry in this list should have a
  # "family" key with the font family name, and a "fonts" key with a
  # list giving the asset and other descriptors for the font. For
  # example:
  # fonts:
  #   - family: Schyler
  #     fonts:
  #       - asset: fonts/Schyler-Regular.ttf
  #       - asset: fonts/Schyler-Italic.ttf
  #         style: italic
  #   - family: Trajan Pro
  #     fonts:
  #       - asset: fonts/TrajanPro.ttf
  #       - asset: fonts/TrajanPro_Bold.ttf
  #         weight: 700
  #
  # For details regarding fonts from package dependencies,
  # see https://flutter.dev/custom-fonts/#from-packages
